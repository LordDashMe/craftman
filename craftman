#!/usr/bin/env python

import re
import os
import sys
import getopt
import shutil
import subprocess


CRAFTMAN_VERSION = '0.2.0'


class CraftMan():

    version = ''
    modules = {}

    def __init__(self, version):

        self.version = version

    def register(self, name, instance):

        self.modules[name] = instance

    def load(self):

        self.author()

        module = self.get_module()

        if module in self.modules:
            self.modules[module].load(self.get_options())
        else:
            self.tips()

    def author(self):

        print ('\033[1;35m\n' +
               ' Craftman - Automation Script for Docker Compose Service.\n\n' +
               ' Version: ' + self.version + '\n' +
               ' Author: Dash Reyes <reyesjoshuaclifford@gmail.com> | https://lorddashme.github.io/\n' +
               ' Powered By: Python' +
               '\033[0;37m\n')

    def get_module(self):

        return None if len(sys.argv) < 2 else sys.argv[1]

    def get_options(self):

        return sys.argv[2:]

    def tips(self):

        print (' Usage: ./craftman <module> [options]\n\n' +
               ' Modules:\n\n' +
               '  storage          Use to check the available slots on the service network.\n' +
               '  service          Use to setup service for docker compose projects.\n' +
               '  service-delete   Use to delete the service from the storage network.\n' +
               '  network          Use to setup default development environment for docker.\n' +
               '  environment      Use to setup environment for the docker compose file.\n')


class Storage():

    def load(self, options):

        with open(os.path.join('storage', 'service-network'), 'r') as f:
            entries = f.readlines()
            f.close()

        last_entry = entries[len(entries) - 1]

        print(
            '\033[1;37m' +
            ' The last entry in the Storage. You can increase the IP Address and Port number for the new service to avoid conflict with other entries. ' +
            '\033[0;37m\n')

        print(' ' + last_entry)


class Service():

    ip = ''
    port = ''
    service = ''
    category = ''

    def load(self, options):

        try:
            self.process_options(options)
        except Exception as a:
            self.tips()
            exit()

        self.process_storage_entries()

    def process_options(self, options):

        (keys, values) = getopt.getopt(options, 'i:p:s:c:',
                                       ['ip=', 'port=', 'service=', 'category=', 'help'])

        for (key, value) in keys:

            if key in ('--help'):
                self.tips()
                exit()
            elif key in ('-i', '--ip'):
                self.ip = value
            elif key in ('-p', '--port'):
                self.port = value
            elif key in ('-s', '--service'):
                self.service = value
            elif key in ('-c', '--category'):
                self.category = value

    def tips(self):

        print (' Module: Service\n\n' +
               ' Usage: ./craftman service' +
               ' --ip=<192.168.x.x> --port=<80>' +
               ' --service=<service-name> --category=<category-name>\n\n' +
               ' Options:\n\n' +
               '  --help      Display help.\n' +
               '  --ip        Set IP Address.\n' +
               '  --port      Set Port.\n' +
               '  --service   Set Service Name.\n' +
               '  --category  Set Category.\n')

    def process_storage_entries(self):

        self.validate_options()
        self.validate_new_entry()
        self.persist_new_entry()

    def validate_options(self):

        if (self.ip is '' or self.port is '' or self.service is '' or self.category is ''):
            print ('\033[1;33m' +
                   ' [WARNING]' +
                   '\033[0;37m\n\n' +
                   '\033[1;37m' +
                   ' No action detected or missing the required options! ' +
                   '\033[0;37m\n')
            exit()

    def validate_new_entry(self):

        entries = None

        with open(os.path.join('storage', 'service-network'), 'r') as f:
            entries = f.readlines()
            f.close()

        last_entry = entries[len(entries) - 1]

        ip_port = '(IP_ADDRESS: ' + self.ip + ' | PORT: ' + self.port + ')'

        for entry in entries:

            if re.search(ip_port, entry):
                print ('\033[1;31m' +
                       ' [FAILED]' +
                       '\033[0;37m\n\n' +
                       '\033[1;37m' +
                       ' The IP and PORT are already used!' +
                       '\033[0;37m\n\n' +
                       ' The last network entry is: \033[1;36m' +
                       last_entry + '\033[0;37m\n'
                       ' To check the current list open this file: "storage/service-network"\n')
                exit()

    def persist_new_entry(self):

        new_entry = ('IP_ADDRESS: ' + self.ip +
                     ' | PORT: ' + self.port +
                     ' | SERVICE: ' + self.service +
                     ' | CATEGORY: ' + self.category + '\n')

        with open(os.path.join('storage', 'service-network'), 'a') as f:
            f.write(new_entry)
            f.close()

        directory = os.path.join(
            'service', self.category, self.ip + '_' + self.service) + os.sep

        if not os.path.exists(directory):
            os.makedirs(directory)

        self.copy_boilerplate_templates(directory)

        print ('\033[1;32m' +
               ' [SUCCESS]' +
               '\033[0;37m\n\n' +
               '\033[1;37m' +
               ' New entry has been created! \n\n' +
               ' Path: cd ' + directory + '\n\n' +
               ' \033[1;31m Please make sure to double check\n' +
               '  and modify the docker-compose.yml generated on the service directory and\n' +
               '  provide .env file for the environment setup, this requires by\n' +
               '  docker-compose.yml before executing the "docker-compose up" command.\033[0;37m\n')

    def copy_boilerplate_templates(self, directory):

        docker_compose_path = os.path.join(directory, 'docker-compose.yml')

        shutil.copy(
            os.path.join('boilerplate', '.sample-docker-compose'), docker_compose_path)
        shutil.copy(
            os.path.join('boilerplate', '.sample-README'), os.path.join(directory, 'README.md'))

        self.replace_docker_compose_content(docker_compose_path)

    def replace_docker_compose_content(self, path):

        content = None

        with open(path, 'r') as f:
            content = (f.read().replace('{SERVICE}', self.service)
                               .replace('{IP_SERVICE}', self.ip + '_' + self.service)
                               .replace('{IP}', self.ip)
                               .replace('{PORT}', self.port))

        with open(path, 'w') as f:
            f.write(content)


class ServiceDelete():

    ip = ''
    service = ''
    category = ''

    def load(self, options):

        try:
            self.process_options(options)
        except Exception as a:
            self.tips()
            exit()

        self.process_delete_service()

    def process_options(self, options):

        (keys, values) = getopt.getopt(options, 'i:s:c:',
                                       ['ip=', 'service=', 'category=', 'help'])

        for (key, value) in keys:

            if key in ('--help'):
                self.tips()
                exit()
            elif key in ('-i', '--ip'):
                self.ip = value
            elif key in ('-s', '--service'):
                self.service = value
            elif key in ('-c', '--category'):
                self.category = value

    def tips(self):

        print (' Module: Service Delete\n\n' +
               ' Usage: ./craftman service-delete' +
               ' --ip=<192.168.x.x> --service=<service-name> --category=<category-name>\n\n' +
               ' Options:\n\n' +
               '  --help      Display help.\n' +
               '  --ip        Set IP Address.\n' +
               '  --service   Set Service Name.\n' +
               '  --category  Set Category.\n')

    def process_delete_service(self):
        
        self.validate_options()
        self.remove_service_entry()

    def validate_options(self):

        if (self.ip is '' or self.service is '' or self.category is ''):
            print ('\033[1;33m' +
                   ' [WARNING]' +
                   '\033[0;37m\n\n' +
                   '\033[1;37m' +
                   ' No action detected or missing the required options! ' +
                   '\033[0;37m\n')
            exit()

    def remove_service_entry(self):

        self.remove_entry_in_storage()
        self.remove_entry_in_directory()

        print ('\n\033[1;32m' +
               ' [SUCCESS]' +
               '\033[0;37m\n\n' +
               '\033[1;37m' +
               ' Done executing action. ' +
               ' \033[0;37m\n')

    def remove_entry_in_storage(self):

        with open(os.path.join('storage', 'service-network'), 'r') as f:
            lines = f.readlines()

        total_deleted_entries = 0

        with open(os.path.join('storage', 'service-network'), 'w') as f:
            for line in lines:
                if ('SERVICE: ' + self.service + ' | CATEGORY: ' + self.category + '') not in line.strip('\n'):
                    f.write(line)
                else:
                    total_deleted_entries += 1

        if (total_deleted_entries <= 0):
            print(' There is no entry detected in the Storage.')

    def remove_entry_in_directory(self):

        directory = os.path.join(
            'service', self.category, self.ip + '_' + self.service) + os.sep

        if not os.path.exists(directory):
            print(' There is no Directory detected.')
        else:
            shutil.rmtree(directory)


class Network():

    def load(self, options):

        try:
            subprocess.check_output(
                ['docker', '-v'], stderr=open(os.devnull, 'wb'))
        except Exception as e:
            print('\033[1;31m' +
                  ' [WARNING]' +
                  '\033[0;37m\n\n' +
                  ' The docker cli engine is not detected on this machine, ' +
                  ' please install the latest docker cli engine.\n')
            exit()

        try:
            subprocess.check_output(
                ['docker',
                 'network',
                 'create',
                 '--driver=bridge',
                 '--subnet=116.0.0.0/8',
                 'development-network'], stderr=open(os.devnull, 'wb'))
        except Exception as e:
            print('\033[1;33m' +
                  ' [WARNING]' +
                  '\033[0;37m\n\n' +
                  ' The docker metwork development setup already applied.\n')
            exit()

        print('\033[1;32m' +
              ' [SUCCESS]' +
              '\033[0;37m\n\n' +
              ' The docker network development setup applied.\n')


class Environment():

    path = ''
    host = ''

    def load(self, options):

        try:
            self.process_options(options)
        except Exception as a:
            self.tips()
            exit()

        if self.path is '' or self.host is '':
            print ('\033[1;33m' +
                   ' [WARNING]' +
                   '\033[0;37m\n\n'
                   ' Required options not provided.\n')
            exit()

        self.copy_boilerplate_templates()

        print ('\033[1;32m' +
               ' [SUCCESS]' +
               '\033[0;37m\n\n'
               ' Environment setup applied.\n')

    def process_options(self, args):

        (keys, values) = getopt.getopt(
            args, 'p:h:', ['path=', 'host=', 'help'])

        for (key, value) in keys:
            if key in ('--help'):
                self.tips()
                exit()
            elif key in ('-p', '--path'):
                self.path = value
            elif key in ('-h', '--host'):
                self.host = value

    def copy_boilerplate_templates(self):

        path = os.path.join(self.path, '.env')

        shutil.copy(os.path.join('boilerplate', '.sample-env'), path)

        self.replace_env_content(path)

    def tips(self):

        print (' Environment File Setup\n\n' +
               ' Usage: ./craftman environment' +
               ' --path=<service/category/project-name> --host=<host-name>\n\n' +
               ' Options:\n\n' +
               ' --help      Display help.\n' +
               ' --path      Set Directory Path.\n' +
               ' --host      Set Host Name.\n')

    def replace_env_content(self, path):

        content = None

        with open(path, 'r') as f:
            content = (f.read().replace('{HOST_NAME}', self.host))
            f.close()

        with open(path, 'w') as f:
            f.write(content)
            f.close()


craftman = CraftMan(CRAFTMAN_VERSION)

craftman.register('storage', Storage())
craftman.register('service', Service())
craftman.register('service-delete', ServiceDelete())
craftman.register('network', Network())
craftman.register('environment', Environment())

craftman.load()
