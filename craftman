#!/usr/bin/env python

import re
import os
import sys
import subprocess
from shutil import copy

CRAFTMAN_VERSION='0.0.1'

class CraftMan():

    def __init__(self, author, service, network, environment):
        author.show()

        # Block the request if there's no action type
        # inputed in the command.
        args = sys.argv
        if len(args) <= 1:
            self.show_help()
            return

        # Set the second argument as the action type.
        # This will be use to determine what function will be using.
        action_type = args[1]

        # ['./craftman', 'service']
        # Remove the arguments that will not be useful
        # for the functions.
        args.remove(args[0])
        args.remove(action_type)

        if action_type == 'service':
            service.process(args)
        elif action_type == 'network':
            network.process(args)
        elif action_type == 'environment':
            environment.process(args)
        elif action_type == 'help':
            self.show_help()
            
    def show_help(self):
        print (' Usage: ./craftman [function...]\n\n' +
               ' Functions:\n\n' +
               '  service      Use to setup service for docker compose projects.\n' +
               '  network      Use to setup default development environment for docker.\n' +
               '  environment  Use to setup environment for the docker compose file.\n' +
               '  help         Use to show the available functions or options.\n')


class Author():

    def show(self):
        print ('\033[1;35m\n' +
               ' Craftman Automation Script for Docker Compose Service.\n' +
               ' Version: ' + CRAFTMAN_VERSION + '\n' + 
               ' Author: Dash Reyes <reyesjoshuaclifford@gmail.com>\n' + 
               ' URL: https://lorddashme.github.io/\n' +
               ' Executable File: ./craftman\n' +
               ' Powered By: Python' +
               '\033[0;37m\n')


class Service():

    ip = None;
    port = None;
    service = None;
    category = None;

    def process(self, args):
        for arg in args:
            if (re.search('(--help)', arg) and (self.ip is None and 
                                                self.port is None and 
                                                self.service is None and 
                                                self.category is None)):
                self.show_help_message()
                return
            if re.search('(--ip=)', arg):
                self.ip = arg.replace('--ip=', '')
            if re.search('(--port=)', arg):
                self.port = arg.replace('--port=', '')
            if re.search('(--service=)', arg):
                self.service = arg.replace('--service=', '')
            if re.search('(--category=)', arg):
                self.category = arg.replace('--category=', '')

        storage_file = self.storage_file()

        entries = storage_file.readlines()
        last_entry = entries[len(entries) - 1]

        # Check if all the options provided.
        if (self.ip is None or self.port is None or self.service is None or self.category is None):
            storage_file.close()
            self.show_default_message('\033[1;33m[WARNING]\033[0;37m', 'No action detected!', last_entry)
            return

        ip_port = ('(IP_ADDRESS: ' + self.ip + ' | PORT: ' + self.port + ')')

        # Check IP and PORT if already exist on the storage file.
        for entry in entries:
            if re.search(ip_port, entry):
                storage_file.close()
                self.show_default_message('\033[1;31m[FAILED]\033[0;37m', 'The IP and PORT are already used!', last_entry)
                return
        
        if (self.ip is not None and self.port is not None and self.service is not None and self.category is not None):
            new_entry = ('IP_ADDRESS: ' + self.ip + 
                         ' | PORT: ' + self.port + 
                         ' | SERVICE: ' + self.service + 
                         ' | CATEGORY: ' + self.category + '\n')
            
            storage_file.write(new_entry)
            storage_file.close()
            
            directory = os.path.join('service', self.category, self.ip + '_' + self.service) + os.sep
            
            if not os.path.exists(directory):
                os.makedirs(directory)
            
            self.copy_boilerplate_template(directory)

            self.show_default_message('\033[1;32m[SUCCESS]\033[0;37m', 
                                      'New entry has been created! \n\n' + 
                                      ' Path: cd ' + directory + '\n\n' +
                                      ' \033[1;31mNOTE: Please make sure to double check and modify the docker-compose.yml base on your project setup\n' + 
                                      '  and provide .env file (which is by default not included in the service directory.) to setup some environment configuration\n' + 
                                      '  that will require by docker-compose.yml before executing the docker compose up command.\033[0;37m', 
                                      new_entry)

    def show_help_message(self):
        print (' Service\n\n' +
               ' Usage: ./craftman service --ip=<192.168.x.x> --port=<80> --service=<service-name> --category=<category-name>\n\n' +
               ' Options:\n\n' +
               ' -h  -help      --help      Display help.\n' +
               ' -i  -ip        --ip        Set IP Address.\n' +
               ' -p  -port      --port      Set Port.\n' +
               ' -s  -service   --service   Set Service Name.\n' +
               ' -c  -category  --category  Set Category.\n' +
               ' -V  -verbose   --verbose   Run script in verbose mode. Print out each step of execution.\n')

    def storage_file(self):
        return open('./storage/service-network', 'r+a')

    def copy_boilerplate_template(self, directory):
        docker_compose_path = os.path.join(directory, 'docker-compose.yml')
            
        copy(os.path.join('boilerplate', '.sample-docker-compose'), docker_compose_path)
        copy(os.path.join('boilerplate', '.sample-README'), os.path.join(directory, 'README.md'))

        self.replace_docker_compose_content(docker_compose_path)

    def replace_docker_compose_content(self, path):
        docker_compose = open(path, 'r')
        docker_compose_content = (docker_compose.read()
                                  .replace('{SERVICE}', self.service)
                                  .replace('{IP_SERVICE}', self.ip + '_' + self.service)
                                  .replace('{IP}', self.ip)
                                  .replace('{PORT}', self.port))
        docker_compose.close()

        docker_compose = open(path, 'w')
        docker_compose.write(docker_compose_content)
        docker_compose.close()

    def show_default_message(self, level, additional_message, last_entry):
        print (' ' + level + '\n\n' + 
               ' \033[1;37m' + additional_message + '\033[0;37m\n\n' +
               ' The last network entry is: \033[1;36m' + last_entry + '\033[0;37m'
               ' To check the current list open file: "storage/service-network"\n')   


class Network():

    def process(self, args):
        try:
            subprocess.check_output(['docker', '-v'], stderr=open(os.devnull, 'wb'))
        except Exception as e:
            self.show_default_message('\033[1;31m[FAILED]\033[0;37m', 'The docker cli engine is not detected on this machine, please install the latest docker cli engine.')
            return

        try:
            subprocess.check_output(['docker', 'network', 'create', '--driver=bridge', '--subnet=116.0.0.0/8', 'development-network'], stderr=open(os.devnull, 'wb'))
        except Exception as e:
            self.show_default_message('\033[1;33m[WARNING]\033[0;37m', 'The docker metwork development setup already applied.')
            return

        self.show_default_message('\033[1;32m[SUCCESS]\033[0;37m', 'The docker network development setup applied.')

    def show_default_message(self, status, message):
        print(' Network\n\n' +
              ' ' + status + '\n\n' +
              ' ' + message + '\n')


class Environment():

    path = None
    host = None

    def process(self, args):
        for arg in args:
            if (re.search('(--help)', arg) and (self.path is None and self.host is None)):
                self.show_help_message()
                return
            if re.search('(--path=)', arg):
                self.path = arg.replace('--path=', '')
            if re.search('(--host=)', arg):
                self.host = arg.replace('--host=', '')

        if self.path is None or self.host is None:
            self.show_default_message('\033[1;33m[WARNING]\033[0;37m', 'Required options not provided.')
            return

        path = os.path.join(self.path, '.env')
        copy(os.path.join('boilerplate', '.sample-env'), path)

        self.replace_content_env(path)

        self.show_default_message('\033[1;32m[SUCCESS]\033[0;37m', 'Environment setup applied.')

    def show_help_message(self):
        print (' Environment File Setup\n\n' +
               ' Usage: ./craftman environment --path=<service/category/project-name> --host=<host-name>\n\n' +
               ' Options:\n\n' +
               ' --help      Display help.\n' +
               ' --path      Set Directory Path.\n' +
               ' --host      Set Host Name.\n')

    def replace_content_env(self, path):
        env = open(path, 'r')
        env_content = (env.read().replace('{HOST_NAME}', self.host))
        env.close()

        env = open(path, 'w')
        env.write(env_content)
        env.close()

    def show_default_message(self, status, text):
        print(' Environtment File Setup\n\n' + 
              ' ' + status + '\n\n' 
              ' ' + text + '\n')


CraftMan(Author(), 
         Service(), 
         Network(), 
         Environment())
